// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/ch629/irc-bot-orchestrator/internal/pkg/proto"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Join provides a mock function with given fields: ctx, botClient
func (_m *Service) Join(ctx context.Context, botClient proto.BotClient) (context.Context, uuid.UUID) {
	ret := _m.Called(ctx, botClient)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, proto.BotClient) context.Context); ok {
		r0 = rf(ctx, botClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 uuid.UUID
	if rf, ok := ret.Get(1).(func(context.Context, proto.BotClient) uuid.UUID); ok {
		r1 = rf(ctx, botClient)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	return r0, r1
}

// JoinChannel provides a mock function with given fields: channel
func (_m *Service) JoinChannel(channel string) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Leave provides a mock function with given fields: id
func (_m *Service) Leave(id uuid.UUID) {
	_m.Called(id)
}

// LeaveChannel provides a mock function with given fields: channel
func (_m *Service) LeaveChannel(channel string) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveBot provides a mock function with given fields: id
func (_m *Service) RemoveBot(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
